#!/usr/bin/python3
import glob
import lzss
import os
#definitions
charext = ".chpal" #file extension for character battle sprite palettes
genext = ".gnpal" #file extension for generic battle sprite palettes
normext = ".hxpal" #file extenstion to find for other input
compext = ".lzpal" #file extenstion of compressed output
EAtext = "Compressed Palette Installer" # name of EA installer file to output 
macrofile = "Palette Definitions.txt" #name of definitions file
    
fileList = []  #get list of uncompressed dumps, change file extenstion as necessary
for ext in [charext, genext, normext]:
    fileList.extend(glob.glob('**/*' + ext ,recursive=True))

if fileList: #skip if no files found
    
    macros = glob.glob('./' + macrofile,recursive=False)

    #creates definitions file if it does not exist
    if (not macros):
        with open('./' + macrofile, 'w') as defile:
                defile.write("// definitions file generated by Pal2EA" + '\n')
        with open('./' + macrofile, 'a') as defile:
        #ifdef guards
            defile.write("#ifndef PalMacros" + '\n\t' + "#define PalMacros" + '\n')
        #define palette table
            defile.write('\t' + "#ifndef PaletteTable" + '\n')
            defile.write('\t\t' + "#ifdef _FE6_" + '\n\t\t\t' + "#define PaletteTable 0x7FC004" + '\n\t\t' + "#endif" + '\n')
            defile.write('\t\t' + "#ifdef _FE7_" + '\n\t\t\t' + "#define PaletteTable 0xFD8004" + '\n\t\t' + "#endif" + '\n')
            defile.write('\t\t' + "#ifdef _FE8_" + '\n\t\t\t' + "#define PaletteTable 0xEF8004" + '\n\t\t' + "#endif" + '\n') 
            defile.write('\t' "#endif" + '\n')
            defile.write('\t' + "#ifndef BattleSpriteTable" + '\n')
            defile.write('\t\t' + "#ifdef _FE6_" + '\n\t\t\t' + "#define BattleSpriteTable 0x6A0008" + '\n\t\t' + "#endif" + '\n')
            defile.write('\t\t' + "#ifdef _FE7_" + '\n\t\t\t' + "#define BattleSpriteTable 0xE00008" + '\n\t\t' + "#endif" + '\n')
            defile.write('\t\t' + "#ifdef _FE8_" + '\n\t\t\t' + "#define BattleSpriteTable 0xC00008" + '\n\t\t' + "#endif" + '\n') 
            defile.write('\t' "#endif" + '\n')
            defile.write('\t' + '#define setPalette(index, palette) "PUSH; ORG (PaletteTable + index * 0x10); POIN palette; POP"' + '\n')
            defile.write('\t' + '#define setGenericPalette(index, genpal) "PUSH; ORG ((BattleSpriteTable - 0x4) + (index * 0x20)); POIN genpal; POP"' + '\n')
            defile.write('\t' + '#ifdef _FE8_' + '\n')
            defile.write('\t\t' + '#define setCharClass(char_id, trainee, base1, base2, promo1, promo2, promo3, promo4) ' +
                         '"PUSH; ORG ($95E0A4 + (char_id -1) * 7); BYTE trainee base1 base2; BYTE promo1 promo2 promo3 promo4; POP"' + '\n')
            defile.write('\t\t' + '#define setCharPalette(char_id, trainee, base1, base2, promo1, promo2, promo3, promo4) ' +
                         '"PUSH; ORG ($95EEA4 + (char_id -1) * 7); BYTE trainee base1 base2; BYTE promo1 promo2 promo3 promo4; POP"' + '\n')
            defile.write('\t' + '#endif' + '\n')
            defile.write("#endif" +'\n')


    EAFile = "./" + EAtext + ".txt"
    with open(EAFile, 'w') as EASetup:
        EASetup.write("// " + EAtext + ' generated by pal2EA' +'\n' + '#include "' + macrofile + '"\n')
    labelList = []
    #file compression loop
    for inputFile in fileList:
        ext = os.path.splitext(inputFile)[1]
        outputFile = inputFile.replace(ext,compext) #name compressed file after uncompressed file but change extension

        #palette autofill routine
        with open(inputFile, 'rb') as inFile:
            size = os.path.getsize(inputFile)
            palnum = int(size/32)
            if (ext == charext):
                index = 5
            elif (ext == genext):
                index = 4
            else:
                index = -1
                
            if (palnum < index):
                contents = bytearray()
                for i in range(0, palnum):
                    inFile.seek(i * 0x20)
                    contents += bytearray(inFile.read(32))
                for i in range(palnum, index):
                    inFile.seek(0)
                    contents += bytearray(inFile.read(32))
            else:
                contents = inFile.read()
                
        lzss.compress(contents, open(outputFile, 'wb'))
        fileName = os.path.basename(outputFile)
        fileName = os.path.splitext(fileName)[0]
        fileName = fileName.replace(" ", "_")
        if fileName[0].isdigit():
            fileName = '_' + fileName
            
        #check if label was already made
        for label in labelList:
            if fileName in labelList:
                n = 1
                while fileName in labelList:
                    n = n + 1
                    fileName = fileName + str(n)
        labelList.append(fileName)

        with open(EAFile, 'a') as EAlist:
            EAlist.write('\n' + fileName + ':' + '\n' + "#incbin " + '\"' + outputFile + '\"' + '\n')

        print (inputFile + " compressed to " + outputFile)
    print ("Compression Complete.")
else: #when no files are found
    print("no files found")
input("Press Enter to continue ")
